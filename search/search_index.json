{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Map JSON The siddhi-map-json extension is an extension to Siddhi that converts JSON messages to/from Siddhi events. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 5.2.2 . Features json ( Sink Mapper ) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. json ( Source Mapper ) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-map-json","text":"The siddhi-map-json extension is an extension to Siddhi that converts JSON messages to/from Siddhi events. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Map JSON"},{"location":"#download","text":"Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 5.2.2 .","title":"Latest API Docs"},{"location":"#features","text":"json ( Sink Mapper ) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. json ( Source Mapper ) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/4.0.17/","text":"API Docs - v4.0.17 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.17"},{"location":"api/4.0.17/#api-docs-v4017","text":"","title":"API Docs - v4.0.17"},{"location":"api/4.0.17/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.17/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.17/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.17/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.18/","text":"API Docs - v4.0.18 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.18"},{"location":"api/4.0.18/#api-docs-v4018","text":"","title":"API Docs - v4.0.18"},{"location":"api/4.0.18/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.18/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.18/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.18/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.19/","text":"API Docs - v4.0.19 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.19"},{"location":"api/4.0.19/#api-docs-v4019","text":"","title":"API Docs - v4.0.19"},{"location":"api/4.0.19/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.19/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.19/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.19/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.20/","text":"API Docs - v4.0.20 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.20"},{"location":"api/4.0.20/#api-docs-v4020","text":"","title":"API Docs - v4.0.20"},{"location":"api/4.0.20/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.20/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.20/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.20/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.21/","text":"API Docs - v4.0.21 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.21"},{"location":"api/4.0.21/#api-docs-v4021","text":"","title":"API Docs - v4.0.21"},{"location":"api/4.0.21/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.21/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.21/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.21/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.22/","text":"API Docs - v4.0.22 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.22"},{"location":"api/4.0.22/#api-docs-v4022","text":"","title":"API Docs - v4.0.22"},{"location":"api/4.0.22/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.22/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.22/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.22/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.23/","text":"API Docs - v4.0.23 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.23"},{"location":"api/4.0.23/#api-docs-v4023","text":"","title":"API Docs - v4.0.23"},{"location":"api/4.0.23/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.23/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.23/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.23/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping . For a single event, expected input will look like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input will look like below. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"testEvent\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.24/","text":"API Docs - v4.0.24 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.24"},{"location":"api/4.0.24/#api-docs-v4024","text":"","title":"API Docs - v4.0.24"},{"location":"api/4.0.24/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.24/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.24/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.24/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.25/","text":"API Docs - v4.0.25 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.25"},{"location":"api/4.0.25/#api-docs-v4025","text":"","title":"API Docs - v4.0.25"},{"location":"api/4.0.25/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.25/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.25/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.25/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.26/","text":"API Docs - v4.0.26 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.26"},{"location":"api/4.0.26/#api-docs-v4026","text":"","title":"API Docs - v4.0.26"},{"location":"api/4.0.26/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.26/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.26/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.26/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.27/","text":"API Docs - v4.0.27 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.27"},{"location":"api/4.0.27/#api-docs-v4027","text":"","title":"API Docs - v4.0.27"},{"location":"api/4.0.27/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.27/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.27/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.27/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.28/","text":"API Docs - v4.0.28 Sinkmapper json (Sink Mapper) Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.28"},{"location":"api/4.0.28/#api-docs-v4028","text":"","title":"API Docs - v4.0.28"},{"location":"api/4.0.28/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.28/#json-sink-mapper","text":"Event to JSON output mapper. Transports which publish messages can utilize this extensionto convert the Siddhi event to JSON message. Users can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json This property will enable JSON validation for generated JSON message. By default value of the property will be false. When enabled, DAS will validate the generated JSON message and drop the message if it does not adhere to proper JSON standards. BOOL No No enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping which will generate below output. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping which will produce below output JSON message {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.28/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.28/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.29/","text":"API Docs - v4.0.29 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.29"},{"location":"api/4.0.29/#api-docs-v4029","text":"","title":"API Docs - v4.0.29"},{"location":"api/4.0.29/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.29/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.29/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.29/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.30/","text":"API Docs - v4.0.30 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.30"},{"location":"api/4.0.30/#api-docs-v4030","text":"","title":"API Docs - v4.0.30"},{"location":"api/4.0.30/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.30/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.30/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.30/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.31/","text":"API Docs - v4.0.31 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.31"},{"location":"api/4.0.31/#api-docs-v4031","text":"","title":"API Docs - v4.0.31"},{"location":"api/4.0.31/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.31/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.31/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.31/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.32/","text":"API Docs - v4.0.32 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.32"},{"location":"api/4.0.32/#api-docs-v4032","text":"","title":"API Docs - v4.0.32"},{"location":"api/4.0.32/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.32/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.32/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.32/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.33/","text":"API Docs - v4.0.33 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.33"},{"location":"api/4.0.33/#api-docs-v4033","text":"","title":"API Docs - v4.0.33"},{"location":"api/4.0.33/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.33/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.33/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.33/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. STRING No No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) BOOL No No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.34/","text":"API Docs - v4.0.34 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.34"},{"location":"api/4.0.34/#api-docs-v4034","text":"","title":"API Docs - v4.0.34"},{"location":"api/4.0.34/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.34/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. BOOL No No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.34/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.34/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.35/","text":"API Docs - v4.0.35 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.35"},{"location":"api/4.0.35/#api-docs-v4035","text":"","title":"API Docs - v4.0.35"},{"location":"api/4.0.35/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.35/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.35/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.35/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.36/","text":"API Docs - v4.0.36 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.36"},{"location":"api/4.0.36/#api-docs-v4036","text":"","title":"API Docs - v4.0.36"},{"location":"api/4.0.36/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.36/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.36/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.36/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.37/","text":"API Docs - v4.0.37 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.37"},{"location":"api/4.0.37/#api-docs-v4037","text":"","title":"API Docs - v4.0.37"},{"location":"api/4.0.37/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.37/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.37/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.37/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.38/","text":"API Docs - v4.0.38 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.38"},{"location":"api/4.0.38/#api-docs-v4038","text":"","title":"API Docs - v4.0.38"},{"location":"api/4.0.38/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.38/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.38/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.38/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.39/","text":"API Docs - v4.0.39 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.39"},{"location":"api/4.0.39/#api-docs-v4039","text":"","title":"API Docs - v4.0.39"},{"location":"api/4.0.39/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.39/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.39/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.39/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.40/","text":"API Docs - v4.0.40 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.40"},{"location":"api/4.0.40/#api-docs-v4040","text":"","title":"API Docs - v4.0.40"},{"location":"api/4.0.40/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.40/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.40/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.40/#json-source-mapper","text":"JSON to Event input mapper. Transports which accepts JSON messages can utilize this extensionto convert the incoming JSON message to Siddhi event. Users can either send a pre-defined JSON format where event conversion will happen without any configs or can use json path to map from a custom JSON message. In default mapping, json string of the event could be enclosed by the element \"event\" which is optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element Used to specify the enclosing element in case of sending multiple events in same JSON message. WSO2 DAS will treat the child element of given enclosing element as events and execute json path expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and json path will be evaluated with respect to root element. $ STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an json execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly. (ie. Assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For a single event, expected input should be in one of the following formats. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default JSON input mapping. For multiple events, expected input should be in one of the following formats. [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) Above configuration will perform a custom JSON mapping. For a single event, expected input will look like below .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom JSON mapping. For multiple events, expected input will look like below .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.41/","text":"API Docs - v4.0.41 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extensionto convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\" , though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events. and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi where users can handleit as required,ie., assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.41"},{"location":"api/4.0.41/#api-docs-v4041","text":"","title":"API Docs - v4.0.41"},{"location":"api/4.0.41/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.41/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extensionto convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.41/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.41/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extensionto convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\" , though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events. and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi where users can handleit as required,ie., assign a default value) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.0.42/","text":"API Docs - v4.0.42 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.0.42"},{"location":"api/4.0.42/#api-docs-v4042","text":"","title":"API Docs - v4.0.42"},{"location":"api/4.0.42/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.42/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.0.42/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.42/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.1.0/","text":"API Docs - v4.1.0 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.1.0"},{"location":"api/4.1.0/#api-docs-v410","text":"","title":"API Docs - v4.1.0"},{"location":"api/4.1.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.1.0/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.1.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.1.0/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/4.1.1/","text":"API Docs - v4.1.1 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"4.1.1"},{"location":"api/4.1.1/#api-docs-v411","text":"","title":"API Docs - v4.1.1"},{"location":"api/4.1.1/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.1.1/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/4.1.1/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.1.1/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.0/","text":"API Docs - v5.0.0 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.0"},{"location":"api/5.0.0/#api-docs-v500","text":"","title":"API Docs - v5.0.0"},{"location":"api/5.0.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.0/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.0/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.1/","text":"API Docs - v5.0.1 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.1"},{"location":"api/5.0.1/#api-docs-v501","text":"","title":"API Docs - v5.0.1"},{"location":"api/5.0.1/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.1/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.1/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.1/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.2/","text":"API Docs - v5.0.2 Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.2"},{"location":"api/5.0.2/#api-docs-v502","text":"","title":"API Docs - v5.0.2"},{"location":"api/5.0.2/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.2/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.2/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.2/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.3/","text":"API Docs - v5.0.3 Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.3"},{"location":"api/5.0.3/#api-docs-v503","text":"Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.3"},{"location":"api/5.0.3/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.3/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.3/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.3/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: .{ \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.4/","text":"API Docs - v5.0.4 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.4"},{"location":"api/5.0.4/#api-docs-v504","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.4"},{"location":"api/5.0.4/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.4/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.4/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.4/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.5/","text":"API Docs - v5.0.5 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.5"},{"location":"api/5.0.5/#api-docs-v505","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.5"},{"location":"api/5.0.5/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.5/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.5/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.5/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.6/","text":"API Docs - v5.0.6 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.6"},{"location":"api/5.0.6/#api-docs-v506","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.6"},{"location":"api/5.0.6/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.6/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.6/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.6/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.0.7/","text":"API Docs - v5.0.7 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.0.7"},{"location":"api/5.0.7/#api-docs-v507","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.7"},{"location":"api/5.0.7/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.7/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.0.7/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.7/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.1.0/","text":"API Docs - v5.1.0 Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.1.0"},{"location":"api/5.1.0/#api-docs-v510","text":"Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.1.0"},{"location":"api/5.1.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.1.0/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.1.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.1.0/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.1.1/","text":"API Docs - v5.1.1 Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.1.1"},{"location":"api/5.1.1/#api-docs-v511","text":"Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.1.1"},{"location":"api/5.1.1/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.1.1/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.1.1/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.1.1/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.2.0/","text":"API Docs - v5.2.0 Tested Siddhi Core version: 5.1.18 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.2.0"},{"location":"api/5.2.0/#api-docs-v520","text":"Tested Siddhi Core version: 5.1.18 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.2.0"},{"location":"api/5.2.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.2.0/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.2.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.2.0/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.2.1/","text":"API Docs - v5.2.1 Tested Siddhi Core version: 5.1.18 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL , enable.null.attribute.value= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No enable.null.attribute.value If this parameter is true, output parameter values will contain null values if not they will be undefined false BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.2.1"},{"location":"api/5.2.1/#api-docs-v521","text":"Tested Siddhi Core version: 5.1.18 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.2.1"},{"location":"api/5.2.1/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.2.1/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL , enable.null.attribute.value= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No enable.null.attribute.value If this parameter is true, output parameter values will contain null values if not they will be undefined false BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.2.1/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.2.1/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/5.2.2/","text":"API Docs - v5.2.2 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL , enable.null.attribute.value= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No enable.null.attribute.value If this parameter is true, output parameter values will contain null values if not they will be undefined false BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"5.2.2"},{"location":"api/5.2.2/#api-docs-v522","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.2.2"},{"location":"api/5.2.2/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.2.2/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL , enable.null.attribute.value= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No enable.null.attribute.value If this parameter is true, output parameter values will contain null values if not they will be undefined false BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/5.2.2/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.2.2/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"},{"location":"api/latest/","text":"API Docs - v5.2.2 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sinkmapper json (Sink Mapper) This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL , enable.null.attribute.value= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No enable.null.attribute.value If this parameter is true, output parameter values will contain null values if not they will be undefined false BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } } Sourcemapper json (Source Mapper) This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"latest"},{"location":"api/latest/#api-docs-v522","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.2.2"},{"location":"api/latest/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/latest/#json-sink-mapper","text":"This extension is an Event to JSON output mapper. Transports that publish messages can utilize this extension to convert Siddhi events to JSON messages. You can either send a pre-defined JSON format or a custom JSON message. Syntax @sink(..., @map(type= json , validate.json= BOOL , enclosing.element= STRING , event.grouping.enabled= BOOL , enable.null.attribute.value= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.json If this property is set to true , it enables JSON validation for the JSON messages generated. When validation is carried out, messages that do not adhere to proper JSON standards are dropped. This property is set to 'false' by default. false BOOL Yes No enclosing.element This specifies the enclosing element to be used if multiple events are sent in the same JSON message. Siddhi treats the child elements of the given enclosing element as events and executes JSON expressions on them. If an enclosing.element is not provided, the multiple event scenario is disregarded and JSON path is evaluated based on the root element. $ STRING Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No enable.null.attribute.value If this parameter is true, output parameter values will contain null values if not they will be undefined false BOOL Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Above configuration does a default JSON input mapping that generates the output given below. { \"event\":{ \"symbol\":WSO2, \"price\":55.6, \"volume\":100 } } EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='json', enclosing.element='$.portfolio', validate.json='true', @payload( { StockData :{ Symbol : {{symbol}} , Price :{{price}}}} ))) define stream BarStream (symbol string, price float, volume long); The above configuration performs a custom JSON mapping that generates the following JSON message as the output. {\"portfolio\":{ \"StockData\":{ \"Symbol\":WSO2, \"Price\":55.6 } } }","title":"json (Sink Mapper)"},{"location":"api/latest/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/latest/#json-source-mapper","text":"This extension is a JSON-to-Event input mapper. Transports that accept JSON messages can utilize this extension to convert an incoming JSON message into a Siddhi event. Users can either send a pre-defined JSON format, where event conversion happens without any configurations, or use the JSON path to map from a custom JSON message. In default mapping, the JSON string of the event can be enclosed by the element \"event\", though optional. Syntax @source(..., @map(type= json , enclosing.element= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic enclosing.element This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element. $ STRING Yes No fail.on.missing.attribute This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true. If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Siddhi, where users can handle it as required, ie., assign a default value.) true BOOL Yes No event.grouping.enabled This parameter is used to preserve event chunks when the value is set to 'true' or the value can be set to 'false' to separate events true BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For a single event, the input is required to be in one of the following formats: { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } or { \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='json')) define stream FooStream (symbol string, price float, volume long); This configuration performs a default JSON input mapping. For multiple events, the input is required to be in one of the following formats: [ {\"event\":{\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}}, {\"event\":{\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80}} ] or [ {\"symbol\":\"WSO2\",\"price\":55.6,\"volume\":100}, {\"symbol\":\"WSO2\",\"price\":56.6,\"volume\":99}, {\"symbol\":\"WSO2\",\"price\":57.6,\"volume\":80} ] EXAMPLE 3 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = company.symbol , price = price , volume = volume ))) This configuration performs a custom JSON mapping. For a single event, the expected input is similar to the one shown below: { \"portfolio\":{ \"stock\":{ \"volume\":100, \"company\":{ \"symbol\":\"WSO2\" }, \"price\":55.6 } } } EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='json', enclosing.element= $.portfolio , @attributes(symbol = stock.company.symbol , price = stock.price , volume = stock.volume ))) define stream FooStream (symbol string, price float, volume long); The configuration performs a custom JSON mapping. For multiple events, expected input looks as follows. .{\"portfolio\": [ {\"stock\":{\"volume\":100,\"company\":{\"symbol\":\"wso2\"},\"price\":56.6}}, {\"stock\":{\"volume\":200,\"company\":{\"symbol\":\"wso2\"},\"price\":57.6}} ] }","title":"json (Source Mapper)"}]}